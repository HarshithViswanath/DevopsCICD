pipeline {
  agent {
    docker {
      image 'abhishekf5/maven-abhishek-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
    }
  }
  stages {
    stage('Checkout') {
      steps {
        sh 'echo passed'
        //git branch: 'main', url: 'https://github.com/HarshithViswanath/DevopsCICD.git'
      }
    }
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        // build the project and create a JAR file
        sh 'cd spring-boot-app && mvn clean package'
      }
    }
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://20.193.128.55:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }
    stage('Build Docker Image') {
            environment {
                DOCKER_IMAGE = "harshithvf10/first-cicd:${BUILD_NUMBER}"
            }
            steps {
                sh '''
                    cd spring-boot-app
                    docker build -t ${DOCKER_IMAGE} .
                '''
            }
        }
     stage('Trivy Image Scan') {
            environment {
                DOCKER_IMAGE = "harshithvf10/first-cicd:${BUILD_NUMBER}"
            }
            steps {
                sh '''
                    echo "üîç Running Trivy scan on Docker image and generating HTML report..."
                    mkdir -p $WORKSPACE/trivy-reports
                    docker run --rm \
                        -v /var/run/docker.sock:/var/run/docker.sock \
                        -v $WORKSPACE:/workspace \
                        aquasec/trivy:latest \
                        image --exit-code 0 --no-progress \
                        --format template --template "@contrib/html.tpl" \
                        --output /workspace/trivy-reports/trivy-report.html ${DOCKER_IMAGE}
                '''
                // Archive the HTML report so it can be downloaded/viewed
                archiveArtifacts artifacts: 'trivy-reports/trivy-report.html', allowEmptyArchive: true
            }
        }
    stage('Push Docker Image') {
            environment {
                DOCKER_IMAGE = "harshithvf10/first-cicd:${BUILD_NUMBER}"
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-cred', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                        echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                        docker push ${DOCKER_IMAGE}
                    '''
                }
            }
      }
    
    stage('Update Deployment File') {
        environment {
            GIT_REPO_NAME = "DevopsCICD"
            GIT_USER_NAME = "HarshithViswanath"
        }
        steps {
            withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                sh '''
                    git config user.email "harshy33342b@gmail.com "
                    git config user.name "HarshithViswanath"
                    BUILD_NUMBER=${BUILD_NUMBER}
                    sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" spring-boot-app-manifests/deployment.yml
                    git add spring-boot-app-manifests/deployment.yml
                    git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                    git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                '''
            }
        }
    }
  }
}
